// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/Memory.hdl

/**
 * The complete address space of the Hack computer's memory,
 * including RAM and memory-mapped I/O. 
 * The chip facilitates read and write operations, as follows:
 *     Read:  out(t) = Memory[address(t)](t)
 *     Write: if load(t-1) then Memory[address(t-1)](t) = in(t-1)
 * In words: the chip always outputs the value stored at the memory 
 * location specified by address. If load==1, the in value is loaded 
 * into the memory location specified by address. This value becomes 
 * available through the out output from the next time step onward.
 * Address space rules:
 * Only the upper 16K+8K+1 words of the Memory chip are used. 
 * Access to address>0x6000 is invalid. Access to any address in 
 * the range 0x4000-0x5FFF results in accessing the screen memory 
 * map. Access to address 0x6000 results in accessing the keyboard 
 * memory map. The behavior in these addresses is described in the 
 * Screen and Keyboard chip specifications given in the book.
 */

CHIP Memory {
    IN in[16], load, address[15];
    OUT out[16];

    PARTS:
    Not(in=address[14], out=ram);
    And(a=load, b=ram, out=RAMload);

    RAM16K(in=in, load=RAMload, address=address[0..13], out=RAMout);
    Mux16(a=false, b=RAMout, sel=ram, out=actualRAMout);

    Not(in=address[13], out=noKEYload);

    And(a=address[14], b=noKEYload, out=SCREENload);

    And(a=SCREENload, b=address[12], out=SCREEN2);
    And(a=SCREEN2, b=load, out=Sl2);
    Not(in=address[12], out=F);
    And(a=SCREENload, b=F, out=SCREEN1);
    And(a=SCREEN1, b=load, out=Sl1);

    RAM4K(in=in, load=Sl1, address=address[0..11], out=S1);
    Mux16(a=false, b=S1, sel=SCREEN1, out=S1actual);

    RAM4K(in=in, load=Sl2, address=address[0..11], out=S2);
    Mux16(a=false, b=S2, sel=SCREEN2, out=S2actual);

    And(a=address[14], b=address[13], out=K1);
    And(a=K1, b=address[12], out=Kread);
    
    Register(in=in, load=false, out=Kout);
    Mux16(a=false, b=Kout, sel=Kread, out=Kactual);

    Or16(a=S1actual, b=S2actual, out=S);
    Or16(a=actualRAMout, b=Kactual, out=RK);
    Or16(a=S, b=RK, out=out);
}