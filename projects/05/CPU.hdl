// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:

    // OP code
    And(a=instruction[15], b=true, out=Copcode);
    Not(in=Copcode, out=Aopcode);

    // A input MUX
    And(a=instruction[5], b=Copcode, out=WaluToA);
    Mux16(a=instruction, b=aluOut, sel=WaluToA, out=AregIn);

    // A Register
    Or(a=Aopcode, b=WaluToA, out=WtoA);
    ARegister(in=AregIn, load=WtoA, out=AregOut, out[0..14]=addressM);

    // D register
    And(a=Copcode, b=instruction[4], out=WtoD);
    DRegister(in=aluOut, load=WtoD, out=DregOut);

    // ALU 2nd input MUX
    Mux16(a=AregOut, b=inM, sel=instruction[12], out=AorMem);

    // ALU
    ALU(x=DregOut, y=AorMem, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=aluOut, out=outM, zr=ZERO, ng=NEG);
    Not(in=NEG, out=NonNEG);
    Not(in=ZERO, out=NonZero);
    And(a=NonNEG, b=NonZero, out=POS);
    Or(a=NEG, b=ZERO, out=NonPOS);

    // Do we write to Mem?
    And(a=Copcode, b=instruction[3], out=writeM);

    // Jump -----------------------
    And(a=instruction[0], b=instruction[1], out=J23);
    And(a=instruction[1], b=instruction[2], out=J12);
    And(a=instruction[0], b=instruction[2], out=J13);

    And(a=J23, b=instruction[2], out=JMP);
    And(a=J12, b=NonPOS, out=JLE);
    And(a=J13, b=NonZero, out=JNE);
    And(a=instruction[2], b=NEG, out=JLT);
    And(a=J23, b=NonNEG, out=JGE);
    And(a=instruction[1], b=ZERO, out=JEQ);
    And(a=instruction[0], b=POS, out=JGT);

    Or8Way(in[0]=JMP, in[1]=JLE, in[2]=JNE,in[3]=JLT,in[4]=JGE,in[5]=JEQ,in[6]=JGT,out=WantJMP);
    And(a=WantJMP, b=Copcode, out=DoJMP);

    Not(in=JMP, out=NoJMP);
    Or(a=NoJMP, b=Aopcode, out=incPC);
    // Jump -----------------------

    // PC
    PC(in=AregOut, load=DoJMP, inc=incPC, reset=reset, out[0..14]=pc);
}